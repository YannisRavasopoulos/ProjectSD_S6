@startuml

actor Passenger

participant FindRideView
participant FindRideViewModel
participant RideRepository
participant Navigator
participant LoopApp
participant HomeView
participant Ride
participant RideCard

activate LoopApp
activate FindRideViewModel
activate RideRepository
activate Navigator
activate HomeView

== Find Ride ==
Passenger -> HomeView: Presses "Find Ride"
HomeView -> HomeView: onFindRidePressed()
HomeView -> Navigator: pushNamed("/rides/find")
Navigator -> LoopApp: "/rides/find"
LoopApp -> FindRideView: FindRideView(findRideViewModel)
activate FindRideView
FindRideView -> RideCard: RideCard(ride, onJoinRidePressed: onJoinRidePressed)
activate RideCard
RideCard --> FindRideView: return rideCard
FindRideView --> LoopApp: return findRideView
LoopApp --> Navigator: return findRideView
Navigator --> FindRideView: build(context)

alt Insta Ride
Passenger -> FindRideView: Enters source location
FindRideView -> FindRideView: onSourceLocationChanged()
FindRideView -> FindRideViewModel: selectSourceLocation()
FindRideViewModel -> FindRideViewModel: updateRides()
FindRideViewModel -> RideRepository: fetchMatchingRides(...)
RideRepository -> Ride: Ride(...)
activate Ride
Ride --> RideRepository: return ride
RideRepository --> FindRideViewModel: matchingRides
FindRideViewModel -> FindRideViewModel: onRidesUpdated(matchingRides)
deactivate RideCard
FindRideView -> RideCard: RideCard(ride, onJoinRidePressed: onJoinRidePressed)
activate RideCard
RideCard -> FindRideView: return rideCard

Passenger -> FindRideView: Enters destination location
FindRideView -> FindRideView: onDestinationLocationChanged()
FindRideView -> FindRideViewModel: selectDestinationLocation()
FindRideViewModel -> FindRideViewModel: updateRides()
FindRideViewModel -> RideRepository: fetchMatchingRides(...)
deactivate Ride
RideRepository -> Ride: Ride(...)
activate Ride
Ride --> RideRepository: return ride
RideRepository --> FindRideViewModel: matchingRides
FindRideViewModel -> FindRideViewModel: onRidesUpdated(matchingRides)
deactivate RideCard
FindRideView -> RideCard: RideCard(ride, onJoinRidePressed: onJoinRidePressed)
activate RideCard
RideCard -> FindRideView: return rideCard

Passenger -> FindRideView: Enters departure time
FindRideView -> FindRideView: onDepartureTimeChanged()
FindRideView -> FindRideViewModel: selectDepartureTime()
FindRideViewModel -> FindRideViewModel: updateRides()
FindRideViewModel -> RideRepository: fetchMatchingRides(...)
deactivate Ride
RideRepository -> Ride: Ride(...)
activate Ride
Ride --> RideRepository: return ride
RideRepository --> FindRideViewModel: matchingRides
FindRideViewModel -> FindRideViewModel: onRidesUpdated(matchingRides)
deactivate RideCard
FindRideView -> RideCard: RideCard(ride, onJoinRidePressed: onJoinRidePressed)
activate RideCard
RideCard -> FindRideView: return rideCard

Passenger -> FindRideView: Enters arrival time
FindRideView -> FindRideView: onArrivalTimeChanged()
FindRideView -> FindRideViewModel: selectArrivalTime()
FindRideViewModel -> FindRideViewModel: updateRides()
FindRideViewModel -> RideRepository: fetchMatchingRides(...)
deactivate Ride
RideRepository -> Ride: Ride(...)
activate Ride
Ride --> RideRepository: return ride
RideRepository --> FindRideViewModel: matchingRides
FindRideViewModel -> FindRideViewModel: onRidesUpdated(matchingRides)
deactivate RideCard
FindRideView -> RideCard: RideCard(ride, onJoinRidePressed: onJoinRidePressed)
activate RideCard
RideCard -> FindRideView: return rideCard
else Activity Selection
Passenger -> FindRideView: Presses "Select Activity"
FindRideView -> FindRideView: onSelectActivityPressed()
FindRideView -> ActivitySelectionPanel: ActivitySelectionPanel(activities)
activate ActivitySelectionPanel
ActivitySelectionPanel -> FindRideView: onActivitySelected(activity)
Passenger -> ActivitySelectionPanel: Selects activity
FindRideView -> FindRideViewModel: selectActivity(activity)
end

@enduml
