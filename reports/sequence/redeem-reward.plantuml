@startuml

actor User

participant RewardsView
participant RewardsViewModel
participant RewardCard
participant Navigator
participant RewardRepository
participant RedeemConfirmationDialog
participant LoopApp
participant HomeView
participant Reward
participant RedeemedReward

activate Navigator
activate RewardsViewModel
activate RewardRepository
activate HomeView
activate LoopApp

== Redeem Reward ==
User -> HomeView: Presses "Rewards"
HomeView -> HomeView: onRewardsPressed()
HomeView -> Navigator: pushNamed("/rewards")
Navigator -> LoopApp: "/rewards"
LoopApp -> RewardsView: RewardsView(rewardsViewModel)
activate RewardsView
RewardsView --> LoopApp: return rewardsView
LoopApp --> Navigator: return rewardsView
Navigator -> RewardsView: build(context)
' TODO: fetch rewards
RewardsView -> RewardCard: RewardCard(reward, onRedeemPressed)
activate RewardCard
RewardCard --> RewardsView: return rewardCard
User -> RewardCard: Selects a reward and presses "Redeem Reward"
RewardCard -> RewardCard: onRedeemPressed()
RewardCard -> RedeemConfirmationDialog: RedeemConfirmationDialog(reward, onConfirmPressed, onCancelPressed)
activate RedeemConfirmationDialog
RedeemConfirmationDialog --> RewardCard: return dialog
RewardCard -> RewardCard: showDialog(dialog)
alt Confirm
User -> RedeemConfirmationDialog: Presses "Confirm"
RedeemConfirmationDialog -> RewardCard: onConfirmPressed()
RewardCard -> RewardsView: onRedeemReward(reward)
RewardsView -> RewardsViewModel: redeemReward(reward)
RewardsViewModel -> RewardRepository: redeem(reward)
alt Success
deactivate RedeemConfirmationDialog
    RewardRepository --> RewardsViewModel: return redemptionCode
    RewardsViewModel -> RewardsViewModel: updateRewards()
    RewardsViewModel -> RewardRepository: fetchAvailableRewards()
    RewardRepository -> Reward: Reward(...)
    activate Reward
    Reward --> RewardRepository: return reward
    RewardRepository --> RewardsViewModel: return availableRewards
    RewardsViewModel -> RewardRepository: fetchRedeemedRewards()
    RewardRepository -> RedeemedReward: RedeemedReward(...)
    activate RedeemedReward
    Reward --> RewardRepository: return redeemedReward
    RewardRepository --> RewardsViewModel: return redeemedRewards
    RewardsViewModel --> RewardsView: return ok
    RewardsView -> RewardsView: showRedemptionCode(redemptionCode)
    deactivate RedeemedReward
    deactivate Reward
else Insufficient points
    RewardRepository --> RewardsViewModel: return error "Not enough points"
    RewardsViewModel -> RewardsView: showError("Not enough points")
else Reward not found
    RewardRepository --> RewardsViewModel: return error "Reward not found"
    RewardsViewModel -> RewardsView: showError("Reward not found")
activate RedeemConfirmationDialog
end
else Cancel
User -> RedeemConfirmationDialog: Presses "Cancel"
RedeemConfirmationDialog --> RewardCard: onCancelPressed()
deactivate RedeemConfirmationDialog
end

@enduml
