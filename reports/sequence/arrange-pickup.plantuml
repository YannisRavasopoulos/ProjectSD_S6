@startuml

participant User
participant OfferRideView
participant Navigator
participant LoopApp

participant ArrangePickupView
participant ArrangePickupViewmodel
participant PickupRepository

activate Navigator
activate OfferRideView
activate LoopApp
activate User
activate PickupRepository

alt Main Flow: Arrange Pickup
User -> OfferRideView : Click on "Arrange Pickup"
OfferRideView -> Navigator : pushNamed("/pickup-arrange")
Navigator -> LoopApp : "/pickup-arrange"
LoopApp -> ArrangePickupViewmodel : (init)
activate ArrangePickupViewmodel
ArrangePickupViewmodel -> LoopApp : return ArrangePickupViewmodel
LoopApp -> ArrangePickupView : ArrangePickupView(ArrangePickupViewmodel)
activate ArrangePickupView
ArrangePickupView -> LoopApp : return ArrangePickupView
LoopApp -> Navigator : push(ArrangePickupView)
Navigator -> ArrangePickupView : build(context)
User -> ArrangePickupView : Fills in pickup details
ArrangePickupView -> ArrangePickupViewmodel : updatePickupDetails()
alt correct fields
ArrangePickupViewmodel -> PickupRepository : arrangePickup(pickupDetails)
ArrangePickupViewmodel -> ArrangePickupView : showSuccessMessage()
else incorrect fields
ArrangePickupViewmodel -> ArrangePickupView : showErrorMessage()
else cancel
ArrangePickupViewmodel -> PickupRepository : rejectPickup()
ArrangePickupView -> Navigator : pop()

end
deactivate ArrangePickupViewmodel
deactivate ArrangePickupView
deactivate Navigator
deactivate LoopApp
deactivate OfferRideView
deactivate User
deactivate PickupRepository
@enduml
