@startuml

actor User

participant SignInView
participant SignInViewModel
participant AuthenticationRepository
participant Navigator
participant ForgotPasswordView
participant ForgotPasswordViewModel
participant LoopApp

activate Navigator
activate LoopApp
activate AuthenticationRepository
activate SignInViewModel
activate ForgotPasswordViewModel

' TODO: async
Navigator --> LoopApp: "/sign-in"

LoopApp -> SignInView: SignInView(signInViewModel)
activate SignInView

== Sign In ==
User -> SignInView: Enters email
User -> SignInView: Enters password
User -> SignInView: Presses "Sign In"
SignInView -> SignInView: onSignInPressed()
SignInView -> SignInViewModel: signIn()
SignInViewModel -> AuthenticationRepository: login(email, password)

alt Success
AuthenticationRepository --> SignInViewModel: return authentication
SignInViewModel --> SignInView: ok
SignInView -> Navigator: pushNamed("/home")

else User not found
    AuthenticationRepository --> SignInViewModel: error "User not found"
    SignInViewModel -> SignInViewModel: setErrorMessage("User not found")
    SignInViewModel --> SignInView: error
    SignInView -> SignInView: showErrorMessage()
else Wrong password
    AuthenticationRepository --> SignInViewModel: error "Wrong password"
    SignInViewModel -> SignInViewModel: setErrorMessage("Wrong password")
    SignInViewModel --> SignInView: error
    SignInView -> SignInView: showErrorMessage()
end

== Forgot Password ==
User -> SignInView: Presses "Forgot Password?"
SignInView -> SignInView: onForgotPasswordPressed()
SignInView -> Navigator: pushNamed("/forgot-password")
' TODO: async
Navigator -> LoopApp: "/forgot-password"
LoopApp -> ForgotPasswordView: ForgotPasswordView(forgotPasswordViewModel)
activate ForgotPasswordView
User -> ForgotPasswordView: Enters email
User -> ForgotPasswordView: Press "Send Reset Code"
ForgotPasswordView -> ForgotPasswordView: onSendResetCodePressed()
ForgotPasswordView -> ForgotPasswordViewModel: sendResetCode()
ForgotPasswordViewModel -> AuthenticationRepository: sendResetCode(email)
alt Success
    AuthenticationRepository --> ForgotPasswordViewModel: ok
    ForgotPasswordViewModel --> ForgotPasswordView: ok
    User -> ForgotPasswordView: Enters reset code
    ForgotPasswordView -> ForgotPasswordView: onResetCodeEntered()
    ForgotPasswordView -> ForgotPasswordViewModel: checkResetCode()
    ForgotPasswordViewModel -> AuthenticationRepository: checkResetCode(email, resetCode)
    alt Success
        AuthenticationRepository --> ForgotPasswordViewModel: ok
        ForgotPasswordViewModel --> ForgotPasswordView: ok
        alt Success
            User -> ForgotPasswordView: Enters new password
            User -> ForgotPasswordView: Enters new password confirmation
            User -> ForgotPasswordView: Presses "Reset Password"
            ForgotPasswordView -> ForgotPasswordView: onResetPasswordPressed()
            ForgotPasswordView -> ForgotPasswordViewModel: resetPassword()
            ForgotPasswordViewModel -> AuthenticationRepository: resetPassword(email, resetCode, newPassword)
            AuthenticationRepository --> ForgotPasswordViewModel: ok
            ForgotPasswordViewModel --> ForgotPasswordView: ok
            ForgotPasswordView -> Navigator: popUntil("/sign-in")
        else Error resetting password
            ' AuthenticationRepository --> ForgotPasswordViewModel: error "Error resetting password"
            ' ForgotPasswordViewModel -> ForgotPasswordViewModel: setErrorMessage("Error resetting password")
            ' ForgotPasswordViewModel --> ForgotPasswordView: error
            ' ForgotPasswordView -> ForgotPasswordView: showErrorMessage()
        end
    else Invalid reset code
        AuthenticationRepository --> ForgotPasswordViewModel: error "Invalid reset code"
        ForgotPasswordViewModel -> ForgotPasswordViewModel: setErrorMessage("Invalid reset code")
        ForgotPasswordViewModel --> ForgotPasswordView: error
        ForgotPasswordView -> ForgotPasswordView: showErrorMessage()
    end
else User not found
    AuthenticationRepository --> ForgotPasswordViewModel: User not found
    ForgotPasswordViewModel -> ForgotPasswordViewModel: setErrorMessage("User not found")
    ForgotPasswordViewModel --> ForgotPasswordView: error
    ForgotPasswordView -> ForgotPasswordView: showErrorMessage()
end

@enduml
