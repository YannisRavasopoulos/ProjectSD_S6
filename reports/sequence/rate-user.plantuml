@startuml

actor User

participant Navigator
participant LoopApp
participant RateView
participant RateViewModel
participant UserRepository
participant RatingRepository


activate LoopApp
activate UserRepository
activate RatingRepository
User -> RateView: Navigates to "Rate" screen
activate RateView


RateView -> Navigator: pushNamed("/rate", arguments: rated)
activate Navigator
Navigator -> LoopApp: Route "/rate" with rated user

LoopApp -> RateViewModel: Create RateViewModel(ratingRepository, userRepository, rated)
activate RateViewModel
RateViewModel -> UserRepository: fetchCurrent()

UserRepository --> RateViewModel: return currentUser

RateViewModel -> RatingRepository: watch(currentUser)

RatingRepository --> RateViewModel: Stream<List<Rating>>

LoopApp -> RateView: Create RateView(rateViewModel)

LoopApp --> Navigator: return RateView

Navigator -> RateView: build(context)


User -> RateView: Selects rating (stars)

RateView -> RateViewModel: setRating(value)

RateViewModel --> RateView: notifyListeners()


User -> RateView: Enters comment (optional)
RateView -> RateViewModel: setComment(value)

RateViewModel --> RateView: notifyListeners()


User -> RateView: Presses "Submit Rating"
RateView -> RateViewModel: submitRating(rated)
RateViewModel -> RatingRepository: create(Rating(fromUser, toUser, stars, comment))

RatingRepository -> Rating: new Rating(...)
activate Rating
Rating --> RatingRepository: return rating
deactivate Rating
RatingRepository --> RateViewModel: return


alt Rating successfully created
    RateViewModel --> RateView: notifyListeners() (isSuccess = true)
    RateView -> RateView: showDialog("Your rating has been submitted successfully.")
    User -> RateView: Presses "OK"
    RateView --> Navigator: pop() (close dialog)
    RateView --> Navigator: pop() (return to previous screen)
    deactivate Navigator
else Error
    RateViewModel --> RateView: notifyListeners() (errorMessage)
    RateView -> RateView: show error message
end
deactivate RateViewModel
deactivate RateView

@enduml
